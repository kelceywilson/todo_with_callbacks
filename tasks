#!/usr/local/bin/node
// ^^ The tasks command file should have a shebang pointing to node
// shebang tells you what interpreter to use to run the file
// could also be #!/usr/bin/env node
// bds: "#!/usr/bin/env node" is generally preferred, as this makes it more
// bds: flexible when run on other computers
const fs = require('fs');

// The four command line commands
const add = require('./commands/add');
const comp = require('./commands/complete');
const del = require('./commands/delete');
const list = require('./commands/list');

// bds: changed env var name below, as we discussed
const taskFile = process.env.JSONFILE_PATH || './taskList.json';
// assign task instructions to command and task
const command = process.argv[2];
const task = process.argv.slice(3).join(' ');

// bds: nice! Good error handling throughout.
// log error if missing command
if (!command) {
  console.log('  Missing command - options are "add", "delete", "complete", and "list"');
  process.exit(1);
}

// bds: where is your JSDoc? ;)
// bds: nice to put this in a function to avoid repeated code
// bds: but because it's a function, pass task as an argument rather than
// bds: relying on global
// check for existence of task
function taskExists() {
  if (!task) {
    console.log('  Missing task or task number');
    console.log('  - "add" should be followed by a task description');
    console.log('  - "delete" and "complete" should be followed by a task number');
    process.exit(1);
  }
}

// bds: JSDoc?
// bds: since this is separated out into a function anyway, I would pass command
// bds: and task as arguments, rather than relying on globals.
// bds: also, todoThing is not a very professional (or descriptive) name ;-)
function todoThing() {
  switch (command) {
    case 'list':
      list(console.log);
      break;
    case 'add':
      taskExists();
      add(task);
      break;
    case 'delete':
      taskExists();
      del(task, 'Deleted');
      break;
    case 'complete':
      taskExists();
      comp(task, 'Completed');
      break;
    default:
      console.log('  Invalid command- options are "add", "delete", "complete", and "list"');
  }
}

fs.readFile('./taskList.json', (err) => {
  if (err) {
    if (err.code === 'ENOENT') {
      // bds: better style to separate "default content" string and declare it
      // bds: as a constant at the top
      fs.writeFile(taskFile, '{"nextId": 1, "tasks": [ ], "Deleted": [ ], "Completed": [ ]}', (err2) => {
        // bds: the err2 thing is ugly, but such is life with callbacks ;-)
        if (err2) throw err2;
        todoThing();
      });
    } else {
      throw err;
    }
  } else {
    todoThing();
  }
});
